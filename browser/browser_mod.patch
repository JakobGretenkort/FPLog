diff --git a/dom/base/Document.h b/dom/base/Document.h
index 6ee07c9fa207..1fe58bcc3de7 100644
--- a/dom/base/Document.h
+++ b/dom/base/Document.h
@@ -3333,6 +3333,11 @@ class Document : public nsINode,
   already_AddRefed<Event> CreateEvent(const nsAString& aEventType,
                                       CallerType aCallerType,
                                       ErrorResult& rv) const;
+  already_AddRefed<Event> CreateEventFPLog(const nsAString& aEventType,
+                                      CallerType aCallerType,
+                                      ErrorResult& rv) const {
+    return CreateEvent(aEventType, aCallerType, rv);                                    
+  }
   already_AddRefed<nsRange> CreateRange(ErrorResult& rv);
   already_AddRefed<NodeIterator> CreateNodeIterator(nsINode& aRoot,
                                                     uint32_t aWhatToShow,
diff --git a/dom/base/Navigator.h b/dom/base/Navigator.h
index 99be251bf05a..eb3ecb32f581 100644
--- a/dom/base/Navigator.h
+++ b/dom/base/Navigator.h
@@ -179,6 +179,10 @@ class Navigator final : public nsISupports, public nsWrapperCache {
   MediaDevices* GetMediaDevices(ErrorResult& aRv);
 
   void GetGamepads(nsTArray<RefPtr<Gamepad>>& aGamepads, ErrorResult& aRv);
+  void GetGamepadsFPLog(nsTArray<RefPtr<Gamepad>>& aGamepads, 
+                        ErrorResult& aRv) {
+    return GetGamepads(aGamepads, aRv);
+  }
   GamepadServiceTest* RequestGamepadServiceTest();
   already_AddRefed<Promise> GetVRDisplays(ErrorResult& aRv);
   void FinishGetVRDisplays(bool isWebVRSupportedInwindow, Promise* p);
@@ -220,10 +224,12 @@ class Navigator final : public nsISupports, public nsWrapperCache {
   void GetLanguages(nsTArray<nsString>& aLanguages);
 
   StorageManager* Storage();
+  StorageManager* StorageFPLog() {return Storage();}
 
   static void GetAcceptLanguages(nsTArray<nsString>& aLanguages);
 
   dom::MediaCapabilities* MediaCapabilities();
+  dom::MediaCapabilities* MediaCapabilitiesFPLog() {return MediaCapabilities();}
   dom::MediaSession* MediaSession();
 
   AddonManager* GetMozAddonManager(ErrorResult& aRv);
diff --git a/dom/base/nsGlobalWindowInner.cpp b/dom/base/nsGlobalWindowInner.cpp
index 3c96c632bd93..a55243c43f67 100644
--- a/dom/base/nsGlobalWindowInner.cpp
+++ b/dom/base/nsGlobalWindowInner.cpp
@@ -343,6 +343,30 @@ using mozilla::TimeStamp;
 using mozilla::dom::GamepadHandle;
 using mozilla::dom::cache::CacheStorage;
 
+#include <fstream>
+#include <string>
+#include <iostream>
+#include <chrono>
+
+#define FPLOG(_object, _attribute)                                   \
+{                                                                    \
+  std::string object = _object;                                      \
+  std::string attribute = _attribute;                                \
+  std::cout << object + "." + attribute << std::endl;                \
+                                                                     \
+  std::string filename = object + "." + attribute + ".txt";          \
+  std::string path = "/var/www/FPLog/data/" + filename;              \
+  std::ofstream logfile;                                             \
+  logfile.open(path, std::ofstream::out | std::ofstream::app);       \
+                                                                     \
+  std::chrono::milliseconds ms =                                     \
+      duration_cast<std::chrono::milliseconds>(                      \
+      std::chrono::system_clock::now().time_since_epoch());          \
+                                                                     \
+  logfile << ms.count() << std::endl;                                \
+  logfile.close();                                                   \
+}
+
 #define FORWARD_TO_OUTER(method, args, err_rval)                     \
   PR_BEGIN_MACRO                                                     \
   nsGlobalWindowOuter* outer = GetOuterWindowInternal();             \
@@ -4558,6 +4582,8 @@ already_AddRefed<nsICSSDeclaration> nsGlobalWindowInner::GetComputedStyleHelper(
 }
 
 Storage* nsGlobalWindowInner::GetSessionStorage(ErrorResult& aError) {
+  FPLOG("window", "sessionStorage");
+
   nsIPrincipal* principal = GetPrincipal();
   nsIPrincipal* storagePrincipal = GetEffectiveStoragePrincipal();
   BrowsingContext* browsingContext = GetBrowsingContext();
@@ -4679,6 +4705,8 @@ Storage* nsGlobalWindowInner::GetSessionStorage(ErrorResult& aError) {
 }
 
 Storage* nsGlobalWindowInner::GetLocalStorage(ErrorResult& aError) {
+  FPLOG("window", "localStorage");
+
   if (!Storage::StoragePrefIsEnabled()) {
     return nullptr;
   }
@@ -4837,6 +4865,7 @@ Storage* nsGlobalWindowInner::GetLocalStorage(ErrorResult& aError) {
 }
 
 IDBFactory* nsGlobalWindowInner::GetIndexedDB(ErrorResult& aError) {
+  FPLOG("window", "indexedDB");
   if (!mIndexedDB) {
     // This may keep mIndexedDB null without setting an error.
     auto res = IDBFactory::CreateForWindow(this);
diff --git a/dom/base/nsGlobalWindowInner.h b/dom/base/nsGlobalWindowInner.h
index cbbf1f885fab..a3270fbb70aa 100644
--- a/dom/base/nsGlobalWindowInner.h
+++ b/dom/base/nsGlobalWindowInner.h
@@ -741,6 +741,12 @@ class nsGlobalWindowInner final : public mozilla::dom::EventTarget,
   already_AddRefed<mozilla::dom::MediaQueryList> MatchMedia(
       const nsAString& aQuery, mozilla::dom::CallerType aCallerType,
       mozilla::ErrorResult& aError);
+  already_AddRefed<mozilla::dom::MediaQueryList> MatchMediaFPLog(
+      const nsAString& aQuery, mozilla::dom::CallerType aCallerType,
+      mozilla::ErrorResult& aError) {
+    return MatchMedia(aQuery, aCallerType, aError);    
+  }   
+  
   nsScreen* GetScreen(mozilla::ErrorResult& aError);
   void MoveTo(int32_t aXPos, int32_t aYPos,
               mozilla::dom::CallerType aCallerType,
diff --git a/dom/html/HTMLCanvasElement.cpp b/dom/html/HTMLCanvasElement.cpp
index 521bd0aaa8dd..1530f6a2ef33 100644
--- a/dom/html/HTMLCanvasElement.cpp
+++ b/dom/html/HTMLCanvasElement.cpp
@@ -55,6 +55,30 @@
 using namespace mozilla::layers;
 using namespace mozilla::gfx;
 
+#include <fstream>
+#include <string>
+#include <iostream>
+#include <chrono>
+
+#define FPLOG(_object, _attribute)                                   \
+{                                                                    \
+  std::string object = _object;                                      \
+  std::string attribute = _attribute;                                \
+  std::cout << object + "." + attribute << std::endl;                \
+                                                                     \
+  std::string filename = object + "." + attribute + ".txt";          \
+  std::string path = "/var/www/FPLog/data/" + filename;              \
+  std::ofstream logfile;                                             \
+  logfile.open(path, std::ofstream::out | std::ofstream::app);       \
+                                                                     \
+  std::chrono::milliseconds ms =                                     \
+      duration_cast<std::chrono::milliseconds>(                      \
+      std::chrono::system_clock::now().time_since_epoch());          \
+                                                                     \
+  logfile << ms.count() << std::endl;                                \
+  logfile.close();                                                   \
+}
+
 NS_IMPL_NS_NEW_HTML_ELEMENT(Canvas)
 
 namespace mozilla::dom {
@@ -369,7 +393,9 @@ HTMLCanvasElement::HTMLCanvasElement(
     : nsGenericHTMLElement(std::move(aNodeInfo)),
       mResetLayer(true),
       mMaybeModified(false),
-      mWriteOnly(false) {}
+      mWriteOnly(false) {
+    FPLOG("Canvas", "ctor");
+  }
 
 HTMLCanvasElement::~HTMLCanvasElement() {
   if (mContextObserver) {
diff --git a/dom/html/HTMLCanvasElement.h b/dom/html/HTMLCanvasElement.h
index aaaecd0abc49..09303a725332 100644
--- a/dom/html/HTMLCanvasElement.h
+++ b/dom/html/HTMLCanvasElement.h
@@ -168,14 +168,29 @@ class HTMLCanvasElement final : public nsGenericHTMLElement,
   virtual already_AddRefed<nsISupports> GetContext(
       JSContext* aCx, const nsAString& aContextId,
       JS::Handle<JS::Value> aContextOptions, ErrorResult& aRv) override;
+  already_AddRefed<nsISupports> GetContextFPLog(
+      JSContext* aCx, const nsAString& aContextId,
+      JS::Handle<JS::Value> aContextOptions, ErrorResult& aRv) {
+    return GetContext(aCx, aContextId, aContextOptions, aRv);    
+  }
 
   void ToDataURL(JSContext* aCx, const nsAString& aType,
                  JS::Handle<JS::Value> aParams, nsAString& aDataURL,
                  nsIPrincipal& aSubjectPrincipal, ErrorResult& aRv);
+  void ToDataURLFPLog(JSContext* aCx, const nsAString& aType,
+                 JS::Handle<JS::Value> aParams, nsAString& aDataURL,
+                 nsIPrincipal& aSubjectPrincipal, ErrorResult& aRv) {
+    return ToDataURL(aCx, aType, aParams, aDataURL, aSubjectPrincipal, aRv);               
+  }
 
   void ToBlob(JSContext* aCx, BlobCallback& aCallback, const nsAString& aType,
               JS::Handle<JS::Value> aParams, nsIPrincipal& aSubjectPrincipal,
               ErrorResult& aRv);
+  void ToBlobFPLog(JSContext* aCx, BlobCallback& aCallback, 
+              const nsAString& aType, JS::Handle<JS::Value> aParams, 
+              nsIPrincipal& aSubjectPrincipal, ErrorResult& aRv) {
+    return ToBlob(aCx, aCallback, aType, aParams, aSubjectPrincipal, aRv);            
+  }
 
   OffscreenCanvas* TransferControlToOffscreen(ErrorResult& aRv);
 
diff --git a/dom/media/webaudio/AudioContext.cpp b/dom/media/webaudio/AudioContext.cpp
index 2dd35925026d..e234fa83aa0e 100644
--- a/dom/media/webaudio/AudioContext.cpp
+++ b/dom/media/webaudio/AudioContext.cpp
@@ -82,6 +82,30 @@
 
 extern mozilla::LazyLogModule gAutoplayPermissionLog;
 
+#include <fstream>
+#include <string>
+#include <iostream>
+#include <chrono>
+
+#define FPLOG(_object, _attribute)                                   \
+{                                                                    \
+  std::string object = _object;                                      \
+  std::string attribute = _attribute;                                \
+  std::cout << object + "." + attribute << std::endl;                \
+                                                                     \
+  std::string filename = object + "." + attribute + ".txt";          \
+  std::string path = "/var/www/FPLog/data/" + filename;              \
+  std::ofstream logfile;                                             \
+  logfile.open(path, std::ofstream::out | std::ofstream::app);       \
+                                                                     \
+  std::chrono::milliseconds ms =                                     \
+      duration_cast<std::chrono::milliseconds>(                      \
+      std::chrono::system_clock::now().time_since_epoch());          \
+                                                                     \
+  logfile << ms.count() << std::endl;                                \
+  logfile.close();                                                   \
+}
+
 #define AUTOPLAY_LOG(msg, ...) \
   MOZ_LOG(gAutoplayPermissionLog, LogLevel::Debug, (msg, ##__VA_ARGS__))
 
@@ -168,6 +192,8 @@ AudioContext::AudioContext(nsPIDOMWindowInner* aWindow, bool aIsOffline,
       mWasEverAllowedToStart(false),
       mWasEverBlockedToStart(false),
       mWouldBeAllowedToStart(true) {
+  FPLOG("AudioContext", "ctor");    
+  
   bool mute = aWindow->AddAudioContext(this);
 
   // Note: AudioDestinationNode needs an AudioContext that must already be
diff --git a/dom/media/webspeech/synth/SpeechSynthesis.h b/dom/media/webspeech/synth/SpeechSynthesis.h
index 05c90e704148..75c0c207b94e 100644
--- a/dom/media/webspeech/synth/SpeechSynthesis.h
+++ b/dom/media/webspeech/synth/SpeechSynthesis.h
@@ -58,6 +58,9 @@ class SpeechSynthesis final : public DOMEventTargetHelper,
   void OnEnd(const nsSpeechTask* aTask);
 
   void GetVoices(nsTArray<RefPtr<SpeechSynthesisVoice> >& aResult);
+  void GetVoicesFPLog(nsTArray<RefPtr<SpeechSynthesisVoice> >& aResult) {
+    return GetVoices(aResult);
+  }
 
   void ForceEnd();
 
diff --git a/dom/webidl/Document.webidl b/dom/webidl/Document.webidl
index 8312501260d9..f179f40f263a 100644
--- a/dom/webidl/Document.webidl
+++ b/dom/webidl/Document.webidl
@@ -96,6 +96,8 @@ interface Document : Node {
 
   [NewObject, Throws, NeedsCallerType]
   Event createEvent(DOMString interface);
+  [NewObject, Throws, NeedsCallerType]
+  Event createEventFPLog(DOMString interface);
 
   [NewObject, Throws]
   Range createRange();
diff --git a/dom/webidl/HTMLCanvasElement.webidl b/dom/webidl/HTMLCanvasElement.webidl
index dbb23168b8a2..3ca5cede8f9f 100644
--- a/dom/webidl/HTMLCanvasElement.webidl
+++ b/dom/webidl/HTMLCanvasElement.webidl
@@ -24,14 +24,23 @@ interface HTMLCanvasElement : HTMLElement {
 
   [Throws]
   nsISupports? getContext(DOMString contextId, optional any contextOptions = null);
+  [Throws]
+  nsISupports? getContextFPLog(DOMString contextId, optional any contextOptions = null);
 
   [Throws, NeedsSubjectPrincipal]
   DOMString toDataURL(optional DOMString type = "",
                       optional any encoderOptions);
   [Throws, NeedsSubjectPrincipal]
+  DOMString toDataURLFPLog(optional DOMString type = "",
+                      optional any encoderOptions);
+  [Throws, NeedsSubjectPrincipal]
   void toBlob(BlobCallback callback,
               optional DOMString type = "",
               optional any encoderOptions);
+  [Throws, NeedsSubjectPrincipal]
+  void toBlobFPLog(BlobCallback callback,
+              optional DOMString type = "",
+              optional any encoderOptions);
 };
 
 // Mozilla specific bits
diff --git a/dom/webidl/Navigator.webidl b/dom/webidl/Navigator.webidl
index 5382bc56c8c6..5a21bf9cbad4 100644
--- a/dom/webidl/Navigator.webidl
+++ b/dom/webidl/Navigator.webidl
@@ -93,6 +93,9 @@ interface mixin NavigatorContentUtils {
 interface mixin NavigatorStorage {
   [Pref="dom.storageManager.enabled"]
   readonly attribute StorageManager storage;
+  
+    [Pref="dom.storageManager.enabled"]
+  readonly attribute StorageManager storageFPLog;
 };
 
 interface mixin NavigatorStorageUtils {
@@ -152,6 +155,9 @@ partial interface Navigator {
 partial interface Navigator {
   [SameObject, Func="mozilla::dom::MediaCapabilities::Enabled"]
   readonly attribute MediaCapabilities mediaCapabilities;
+  
+  [SameObject, Func="mozilla::dom::MediaCapabilities::Enabled"]
+  readonly attribute MediaCapabilities mediaCapabilitiesFPLog;
 };
 
 // Mozilla-specific extensions
@@ -202,6 +208,9 @@ partial interface Navigator {
 partial interface Navigator {
   [Throws, Pref="dom.gamepad.enabled"]
   sequence<Gamepad?> getGamepads();
+  
+  [Throws, Pref="dom.gamepad.enabled"]
+  sequence<Gamepad?> getGamepadsFPLog();
 };
 partial interface Navigator {
   [Pref="dom.gamepad.test.enabled"]
diff --git a/dom/webidl/SpeechSynthesis.webidl b/dom/webidl/SpeechSynthesis.webidl
index 6353317ffeed..dc52e65b6bfe 100644
--- a/dom/webidl/SpeechSynthesis.webidl
+++ b/dom/webidl/SpeechSynthesis.webidl
@@ -22,6 +22,7 @@ interface SpeechSynthesis : EventTarget{
   void pause();
   void resume();
   sequence<SpeechSynthesisVoice> getVoices();
+  sequence<SpeechSynthesisVoice> getVoicesFPLog();
 
   attribute EventHandler onvoiceschanged;
 
diff --git a/dom/webidl/Window.webidl b/dom/webidl/Window.webidl
index 14b28e5b3c36..97c88f7069bd 100644
--- a/dom/webidl/Window.webidl
+++ b/dom/webidl/Window.webidl
@@ -324,6 +324,8 @@ dictionary ScrollToOptions : ScrollOptions {
 partial interface Window {
   //[Throws, NewObject, NeedsCallerType] MediaQueryList matchMedia(DOMString query);
   [Throws, NewObject, NeedsCallerType] MediaQueryList? matchMedia(DOMString query);
+  
+  [Throws, NewObject, NeedsCallerType] MediaQueryList? matchMediaFPLog(DOMString query);
   // Per spec, screen is SameObject, but we don't actually guarantee that given
   // nsGlobalWindow::Cleanup.  :(
   //[SameObject, Replaceable, Throws] readonly attribute Screen screen;
diff --git a/dom/workers/WorkerNavigator.h b/dom/workers/WorkerNavigator.h
index df8206254948..6be897fc2ed6 100644
--- a/dom/workers/WorkerNavigator.h
+++ b/dom/workers/WorkerNavigator.h
@@ -96,6 +96,7 @@ class WorkerNavigator final : public nsWrapperCache {
   uint64_t HardwareConcurrency() const;
 
   StorageManager* Storage();
+  StorageManager* StorageFPLog() {return Storage();}
 
   network::Connection* GetConnection(ErrorResult& aRv);
 
